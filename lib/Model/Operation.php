<?php
/**
 * Operation
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aerospike REST Client
 *
 * REST Interface for Aerospike Database.
 *
 * The version of the OpenAPI document: 1.6.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Operation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'op_values' => 'object',
        'operation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'op_values' => null,
        'operation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'op_values' => 'opValues',
        'operation' => 'operation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'op_values' => 'setOpValues',
        'operation' => 'setOperation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'op_values' => 'getOpValues',
        'operation' => 'getOperation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const OPERATION_ADD = 'ADD';
    const OPERATION_APPEND = 'APPEND';
    const OPERATION_GET = 'GET';
    const OPERATION_PREPEND = 'PREPEND';
    const OPERATION_READ = 'READ';
    const OPERATION_GET_HEADER = 'GET_HEADER';
    const OPERATION_TOUCH = 'TOUCH';
    const OPERATION_PUT = 'PUT';
    const OPERATION_DELETE = 'DELETE';
    const OPERATION_LIST_APPEND = 'LIST_APPEND';
    const OPERATION_LIST_APPEND_ITEMS = 'LIST_APPEND_ITEMS';
    const OPERATION_LIST_CLEAR = 'LIST_CLEAR';
    const OPERATION_LIST_GET = 'LIST_GET';
    const OPERATION_LIST_GET_BY_INDEX = 'LIST_GET_BY_INDEX';
    const OPERATION_LIST_GET_BY_INDEX_RANGE = 'LIST_GET_BY_INDEX_RANGE';
    const OPERATION_LIST_GET_BY_RANK = 'LIST_GET_BY_RANK';
    const OPERATION_LIST_GET_BY_RANK_RANGE = 'LIST_GET_BY_RANK_RANGE';
    const OPERATION_LIST_GET_BY_VALUE_REL_RANK_RANGE = 'LIST_GET_BY_VALUE_REL_RANK_RANGE';
    const OPERATION_LIST_GET_BY_VALUE = 'LIST_GET_BY_VALUE';
    const OPERATION_LIST_GET_BY_VALUE_RANGE = 'LIST_GET_BY_VALUE_RANGE';
    const OPERATION_LIST_GET_BY_VALUE_LIST = 'LIST_GET_BY_VALUE_LIST';
    const OPERATION_LIST_GET_RANGE = 'LIST_GET_RANGE';
    const OPERATION_LIST_INCREMENT = 'LIST_INCREMENT';
    const OPERATION_LIST_INSERT = 'LIST_INSERT';
    const OPERATION_LIST_INSERT_ITEMS = 'LIST_INSERT_ITEMS';
    const OPERATION_LIST_POP = 'LIST_POP';
    const OPERATION_LIST_POP_RANGE = 'LIST_POP_RANGE';
    const OPERATION_LIST_REMOVE = 'LIST_REMOVE';
    const OPERATION_LIST_REMOVE_BY_INDEX = 'LIST_REMOVE_BY_INDEX';
    const OPERATION_LIST_REMOVE_BY_INDEX_RANGE = 'LIST_REMOVE_BY_INDEX_RANGE';
    const OPERATION_LIST_REMOVE_BY_RANK = 'LIST_REMOVE_BY_RANK';
    const OPERATION_LIST_REMOVE_BY_RANK_RANGE = 'LIST_REMOVE_BY_RANK_RANGE';
    const OPERATION_LIST_REMOVE_BY_VALUE_REL_RANK_RANGE = 'LIST_REMOVE_BY_VALUE_REL_RANK_RANGE';
    const OPERATION_LIST_REMOVE_BY_VALUE = 'LIST_REMOVE_BY_VALUE';
    const OPERATION_LIST_REMOVE_BY_VALUE_RANGE = 'LIST_REMOVE_BY_VALUE_RANGE';
    const OPERATION_LIST_REMOVE_BY_VALUE_LIST = 'LIST_REMOVE_BY_VALUE_LIST';
    const OPERATION_LIST_REMOVE_RANGE = 'LIST_REMOVE_RANGE';
    const OPERATION_LIST_SET = 'LIST_SET';
    const OPERATION_LIST_SET_ORDER = 'LIST_SET_ORDER';
    const OPERATION_LIST_SIZE = 'LIST_SIZE';
    const OPERATION_LIST_SORT = 'LIST_SORT';
    const OPERATION_LIST_TRIM = 'LIST_TRIM';
    const OPERATION_LIST_CREATE = 'LIST_CREATE';
    const OPERATION_MAP_CLEAR = 'MAP_CLEAR';
    const OPERATION_MAP_DECREMENT = 'MAP_DECREMENT';
    const OPERATION_MAP_GET_BY_INDEX = 'MAP_GET_BY_INDEX';
    const OPERATION_MAP_GET_BY_INDEX_RANGE = 'MAP_GET_BY_INDEX_RANGE';
    const OPERATION_MAP_GET_BY_KEY = 'MAP_GET_BY_KEY';
    const OPERATION_MAP_GET_BY_KEY_LIST = 'MAP_GET_BY_KEY_LIST';
    const OPERATION_MAP_GET_BY_KEY_RANGE = 'MAP_GET_BY_KEY_RANGE';
    const OPERATION_MAP_GET_BY_RANK = 'MAP_GET_BY_RANK';
    const OPERATION_MAP_GET_BY_RANK_RANGE = 'MAP_GET_BY_RANK_RANGE';
    const OPERATION_MAP_GET_BY_VALUE = 'MAP_GET_BY_VALUE';
    const OPERATION_MAP_GET_BY_VALUE_RANGE = 'MAP_GET_BY_VALUE_RANGE';
    const OPERATION_MAP_GET_BY_VALUE_LIST = 'MAP_GET_BY_VALUE_LIST';
    const OPERATION_MAP_GET_BY_KEY_REL_INDEX_RANGE = 'MAP_GET_BY_KEY_REL_INDEX_RANGE';
    const OPERATION_MAP_GET_BY_VALUE_REL_RANK_RANGE = 'MAP_GET_BY_VALUE_REL_RANK_RANGE';
    const OPERATION_MAP_INCREMENT = 'MAP_INCREMENT';
    const OPERATION_MAP_PUT = 'MAP_PUT';
    const OPERATION_MAP_PUT_ITEMS = 'MAP_PUT_ITEMS';
    const OPERATION_MAP_REMOVE_BY_INDEX = 'MAP_REMOVE_BY_INDEX';
    const OPERATION_MAP_REMOVE_BY_INDEX_RANGE = 'MAP_REMOVE_BY_INDEX_RANGE';
    const OPERATION_MAP_REMOVE_BY_KEY = 'MAP_REMOVE_BY_KEY';
    const OPERATION_MAP_REMOVE_BY_KEY_RANGE = 'MAP_REMOVE_BY_KEY_RANGE';
    const OPERATION_MAP_REMOVE_BY_RANK = 'MAP_REMOVE_BY_RANK';
    const OPERATION_MAP_REMOVE_BY_RANK_RANGE = 'MAP_REMOVE_BY_RANK_RANGE';
    const OPERATION_MAP_REMOVE_BY_KEY_REL_INDEX_RANGE = 'MAP_REMOVE_BY_KEY_REL_INDEX_RANGE';
    const OPERATION_MAP_REMOVE_BY_VALUE_REL_RANK_RANGE = 'MAP_REMOVE_BY_VALUE_REL_RANK_RANGE';
    const OPERATION_MAP_REMOVE_BY_VALUE = 'MAP_REMOVE_BY_VALUE';
    const OPERATION_MAP_REMOVE_BY_VALUE_RANGE = 'MAP_REMOVE_BY_VALUE_RANGE';
    const OPERATION_MAP_REMOVE_BY_VALUE_LIST = 'MAP_REMOVE_BY_VALUE_LIST';
    const OPERATION_MAP_SET_MAP_POLICY = 'MAP_SET_MAP_POLICY';
    const OPERATION_MAP_SIZE = 'MAP_SIZE';
    const OPERATION_MAP_CREATE = 'MAP_CREATE';
    const OPERATION_BIT_RESIZE = 'BIT_RESIZE';
    const OPERATION_BIT_INSERT = 'BIT_INSERT';
    const OPERATION_BIT_REMOVE = 'BIT_REMOVE';
    const OPERATION_BIT_SET = 'BIT_SET';
    const OPERATION_BIT_OR = 'BIT_OR';
    const OPERATION_BIT_XOR = 'BIT_XOR';
    const OPERATION_BIT_AND = 'BIT_AND';
    const OPERATION_BIT_NOT = 'BIT_NOT';
    const OPERATION_BIT_LSHIFT = 'BIT_LSHIFT';
    const OPERATION_BIT_RSHIFT = 'BIT_RSHIFT';
    const OPERATION_BIT_ADD = 'BIT_ADD';
    const OPERATION_BIT_SUBTRACT = 'BIT_SUBTRACT';
    const OPERATION_BIT_SET_INT = 'BIT_SET_INT';
    const OPERATION_BIT_GET = 'BIT_GET';
    const OPERATION_BIT_COUNT = 'BIT_COUNT';
    const OPERATION_BIT_LSCAN = 'BIT_LSCAN';
    const OPERATION_BIT_RSCAN = 'BIT_RSCAN';
    const OPERATION_BIT_GET_INT = 'BIT_GET_INT';
    const OPERATION_HLL_INIT = 'HLL_INIT';
    const OPERATION_HLL_ADD = 'HLL_ADD';
    const OPERATION_HLL_SET_UNION = 'HLL_SET_UNION';
    const OPERATION_HLL_SET_COUNT = 'HLL_SET_COUNT';
    const OPERATION_HLL_FOLD = 'HLL_FOLD';
    const OPERATION_HLL_COUNT = 'HLL_COUNT';
    const OPERATION_HLL_UNION = 'HLL_UNION';
    const OPERATION_HLL_UNION_COUNT = 'HLL_UNION_COUNT';
    const OPERATION_HLL_INTERSECT_COUNT = 'HLL_INTERSECT_COUNT';
    const OPERATION_HLL_SIMILARITY = 'HLL_SIMILARITY';
    const OPERATION_HLL_DESCRIBE = 'HLL_DESCRIBE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationAllowableValues()
    {
        return [
            self::OPERATION_ADD,
            self::OPERATION_APPEND,
            self::OPERATION_GET,
            self::OPERATION_PREPEND,
            self::OPERATION_READ,
            self::OPERATION_GET_HEADER,
            self::OPERATION_TOUCH,
            self::OPERATION_PUT,
            self::OPERATION_DELETE,
            self::OPERATION_LIST_APPEND,
            self::OPERATION_LIST_APPEND_ITEMS,
            self::OPERATION_LIST_CLEAR,
            self::OPERATION_LIST_GET,
            self::OPERATION_LIST_GET_BY_INDEX,
            self::OPERATION_LIST_GET_BY_INDEX_RANGE,
            self::OPERATION_LIST_GET_BY_RANK,
            self::OPERATION_LIST_GET_BY_RANK_RANGE,
            self::OPERATION_LIST_GET_BY_VALUE_REL_RANK_RANGE,
            self::OPERATION_LIST_GET_BY_VALUE,
            self::OPERATION_LIST_GET_BY_VALUE_RANGE,
            self::OPERATION_LIST_GET_BY_VALUE_LIST,
            self::OPERATION_LIST_GET_RANGE,
            self::OPERATION_LIST_INCREMENT,
            self::OPERATION_LIST_INSERT,
            self::OPERATION_LIST_INSERT_ITEMS,
            self::OPERATION_LIST_POP,
            self::OPERATION_LIST_POP_RANGE,
            self::OPERATION_LIST_REMOVE,
            self::OPERATION_LIST_REMOVE_BY_INDEX,
            self::OPERATION_LIST_REMOVE_BY_INDEX_RANGE,
            self::OPERATION_LIST_REMOVE_BY_RANK,
            self::OPERATION_LIST_REMOVE_BY_RANK_RANGE,
            self::OPERATION_LIST_REMOVE_BY_VALUE_REL_RANK_RANGE,
            self::OPERATION_LIST_REMOVE_BY_VALUE,
            self::OPERATION_LIST_REMOVE_BY_VALUE_RANGE,
            self::OPERATION_LIST_REMOVE_BY_VALUE_LIST,
            self::OPERATION_LIST_REMOVE_RANGE,
            self::OPERATION_LIST_SET,
            self::OPERATION_LIST_SET_ORDER,
            self::OPERATION_LIST_SIZE,
            self::OPERATION_LIST_SORT,
            self::OPERATION_LIST_TRIM,
            self::OPERATION_LIST_CREATE,
            self::OPERATION_MAP_CLEAR,
            self::OPERATION_MAP_DECREMENT,
            self::OPERATION_MAP_GET_BY_INDEX,
            self::OPERATION_MAP_GET_BY_INDEX_RANGE,
            self::OPERATION_MAP_GET_BY_KEY,
            self::OPERATION_MAP_GET_BY_KEY_LIST,
            self::OPERATION_MAP_GET_BY_KEY_RANGE,
            self::OPERATION_MAP_GET_BY_RANK,
            self::OPERATION_MAP_GET_BY_RANK_RANGE,
            self::OPERATION_MAP_GET_BY_VALUE,
            self::OPERATION_MAP_GET_BY_VALUE_RANGE,
            self::OPERATION_MAP_GET_BY_VALUE_LIST,
            self::OPERATION_MAP_GET_BY_KEY_REL_INDEX_RANGE,
            self::OPERATION_MAP_GET_BY_VALUE_REL_RANK_RANGE,
            self::OPERATION_MAP_INCREMENT,
            self::OPERATION_MAP_PUT,
            self::OPERATION_MAP_PUT_ITEMS,
            self::OPERATION_MAP_REMOVE_BY_INDEX,
            self::OPERATION_MAP_REMOVE_BY_INDEX_RANGE,
            self::OPERATION_MAP_REMOVE_BY_KEY,
            self::OPERATION_MAP_REMOVE_BY_KEY_RANGE,
            self::OPERATION_MAP_REMOVE_BY_RANK,
            self::OPERATION_MAP_REMOVE_BY_RANK_RANGE,
            self::OPERATION_MAP_REMOVE_BY_KEY_REL_INDEX_RANGE,
            self::OPERATION_MAP_REMOVE_BY_VALUE_REL_RANK_RANGE,
            self::OPERATION_MAP_REMOVE_BY_VALUE,
            self::OPERATION_MAP_REMOVE_BY_VALUE_RANGE,
            self::OPERATION_MAP_REMOVE_BY_VALUE_LIST,
            self::OPERATION_MAP_SET_MAP_POLICY,
            self::OPERATION_MAP_SIZE,
            self::OPERATION_MAP_CREATE,
            self::OPERATION_BIT_RESIZE,
            self::OPERATION_BIT_INSERT,
            self::OPERATION_BIT_REMOVE,
            self::OPERATION_BIT_SET,
            self::OPERATION_BIT_OR,
            self::OPERATION_BIT_XOR,
            self::OPERATION_BIT_AND,
            self::OPERATION_BIT_NOT,
            self::OPERATION_BIT_LSHIFT,
            self::OPERATION_BIT_RSHIFT,
            self::OPERATION_BIT_ADD,
            self::OPERATION_BIT_SUBTRACT,
            self::OPERATION_BIT_SET_INT,
            self::OPERATION_BIT_GET,
            self::OPERATION_BIT_COUNT,
            self::OPERATION_BIT_LSCAN,
            self::OPERATION_BIT_RSCAN,
            self::OPERATION_BIT_GET_INT,
            self::OPERATION_HLL_INIT,
            self::OPERATION_HLL_ADD,
            self::OPERATION_HLL_SET_UNION,
            self::OPERATION_HLL_SET_COUNT,
            self::OPERATION_HLL_FOLD,
            self::OPERATION_HLL_COUNT,
            self::OPERATION_HLL_UNION,
            self::OPERATION_HLL_UNION_COUNT,
            self::OPERATION_HLL_INTERSECT_COUNT,
            self::OPERATION_HLL_SIMILARITY,
            self::OPERATION_HLL_DESCRIBE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['op_values'] = $data['op_values'] ?? null;
        $this->container['operation'] = $data['operation'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['op_values'] === null) {
            $invalidProperties[] = "'op_values' can't be null";
        }
        if ($this->container['operation'] === null) {
            $invalidProperties[] = "'operation' can't be null";
        }
        $allowedValues = $this->getOperationAllowableValues();
        if (!is_null($this->container['operation']) && !in_array($this->container['operation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets op_values
     *
     * @return object
     */
    public function getOpValues()
    {
        return $this->container['op_values'];
    }

    /**
     * Sets op_values
     *
     * @param object $op_values op_values
     *
     * @return self
     */
    public function setOpValues($op_values)
    {
        $this->container['op_values'] = $op_values;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation Aerospike operation to perform on the record
     *
     * @return self
     */
    public function setOperation($operation)
    {
        $allowedValues = $this->getOperationAllowableValues();
        if (!in_array($operation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operation'] = $operation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


