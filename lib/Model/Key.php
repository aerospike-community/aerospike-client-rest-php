<?php
/**
 * Key
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aerospike REST Client
 *
 * REST Interface for Aerospike Database.
 *
 * The version of the OpenAPI document: 1.6.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Key Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Key implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Key';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'digest' => 'string',
        'keytype' => 'string',
        'namespace' => 'string',
        'set_name' => 'string',
        'user_key' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'digest' => null,
        'keytype' => null,
        'namespace' => null,
        'set_name' => null,
        'user_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'digest' => 'digest',
        'keytype' => 'keytype',
        'namespace' => 'namespace',
        'set_name' => 'setName',
        'user_key' => 'userKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'digest' => 'setDigest',
        'keytype' => 'setKeytype',
        'namespace' => 'setNamespace',
        'set_name' => 'setSetName',
        'user_key' => 'setUserKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'digest' => 'getDigest',
        'keytype' => 'getKeytype',
        'namespace' => 'getNamespace',
        'set_name' => 'getSetName',
        'user_key' => 'getUserKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const KEYTYPE_STRING = 'STRING';
    const KEYTYPE_INTEGER = 'INTEGER';
    const KEYTYPE_BYTES = 'BYTES';
    const KEYTYPE_DIGEST = 'DIGEST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getKeytypeAllowableValues()
    {
        return [
            self::KEYTYPE_STRING,
            self::KEYTYPE_INTEGER,
            self::KEYTYPE_BYTES,
            self::KEYTYPE_DIGEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['digest'] = $data['digest'] ?? null;
        $this->container['keytype'] = $data['keytype'] ?? null;
        $this->container['namespace'] = $data['namespace'] ?? null;
        $this->container['set_name'] = $data['set_name'] ?? null;
        $this->container['user_key'] = $data['user_key'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getKeytypeAllowableValues();
        if (!is_null($this->container['keytype']) && !in_array($this->container['keytype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'keytype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['namespace'] === null) {
            $invalidProperties[] = "'namespace' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets digest
     *
     * @return string|null
     */
    public function getDigest()
    {
        return $this->container['digest'];
    }

    /**
     * Sets digest
     *
     * @param string|null $digest URL safe base64 encoded key digest. Returned by the server on batch responses. May be provided by client.
     *
     * @return self
     */
    public function setDigest($digest)
    {
        $this->container['digest'] = $digest;

        return $this;
    }

    /**
     * Gets keytype
     *
     * @return string|null
     */
    public function getKeytype()
    {
        return $this->container['keytype'];
    }

    /**
     * Sets keytype
     *
     * @param string|null $keytype Enum describing the type of the userKey. This field is omitted in MessagePack responses.
     *
     * @return self
     */
    public function setKeytype($keytype)
    {
        $allowedValues = $this->getKeytypeAllowableValues();
        if (!is_null($keytype) && !in_array($keytype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'keytype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['keytype'] = $keytype;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return self
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets set_name
     *
     * @return string|null
     */
    public function getSetName()
    {
        return $this->container['set_name'];
    }

    /**
     * Sets set_name
     *
     * @param string|null $set_name set_name
     *
     * @return self
     */
    public function setSetName($set_name)
    {
        $this->container['set_name'] = $set_name;

        return $this;
    }

    /**
     * Gets user_key
     *
     * @return object|null
     */
    public function getUserKey()
    {
        return $this->container['user_key'];
    }

    /**
     * Sets user_key
     *
     * @param object|null $user_key The user key, it may be a string, integer, or URL safe Base64 encoded bytes.
     *
     * @return self
     */
    public function setUserKey($user_key)
    {
        $this->container['user_key'] = $user_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


