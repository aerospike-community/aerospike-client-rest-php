<?php
/**
 * KeyValueOperationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aerospike REST Client
 *
 * REST Interface for Aerospike Database.
 *
 * OpenAPI spec version: 1.6.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * KeyValueOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class KeyValueOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRecordNamespaceKey
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createRecordNamespaceKey($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->createRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation createRecordNamespaceKeyWithHttpInfo
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->createRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRecordNamespaceKeyAsync
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordNamespaceKeyAsync($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->createRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRecordNamespaceKeyAsyncWithHttpInfo
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->createRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRecordNamespaceKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRecordNamespaceKeyRequest($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createRecordNamespaceKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling createRecordNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling createRecordNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRecordNamespaceSetKey
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createRecordNamespaceSetKey($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->createRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation createRecordNamespaceSetKeyWithHttpInfo
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->createRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRecordNamespaceSetKeyAsync
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordNamespaceSetKeyAsync($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->createRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRecordNamespaceSetKeyAsyncWithHttpInfo
     *
     * Create a new record with the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->createRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRecordNamespaceSetKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling createRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling createRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling createRecordNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecordNamespaceKey
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRecordNamespaceKey($key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->deleteRecordNamespaceKeyWithHttpInfo($key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation deleteRecordNamespaceKeyWithHttpInfo
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordNamespaceKeyWithHttpInfo($key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->deleteRecordNamespaceKeyRequest($key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordNamespaceKeyAsync
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordNamespaceKeyAsync($key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->deleteRecordNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordNamespaceKeyAsyncWithHttpInfo
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->deleteRecordNamespaceKeyRequest($key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecordNamespaceKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRecordNamespaceKeyRequest($key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling deleteRecordNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling deleteRecordNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRecordNamespaceSetKey
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRecordNamespaceSetKey($key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->deleteRecordNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation deleteRecordNamespaceSetKeyWithHttpInfo
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRecordNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->deleteRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRecordNamespaceSetKeyAsync
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordNamespaceSetKeyAsync($key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->deleteRecordNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRecordNamespaceSetKeyAsyncWithHttpInfo
     *
     * Delete the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRecordNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->deleteRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRecordNamespaceSetKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling deleteRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling deleteRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling deleteRecordNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordNamespaceKey
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Record
     */
    public function getRecordNamespaceKey($key, $namespace, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->getRecordNamespaceKeyWithHttpInfo($key, $namespace, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation getRecordNamespaceKeyWithHttpInfo
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Record, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordNamespaceKeyWithHttpInfo($key, $namespace, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\Record';
        $request = $this->getRecordNamespaceKeyRequest($key, $namespace, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Record',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordNamespaceKeyAsync
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordNamespaceKeyAsync($key, $namespace, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->getRecordNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordNamespaceKeyAsyncWithHttpInfo
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\Record';
        $request = $this->getRecordNamespaceKeyRequest($key, $namespace, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordNamespaceKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecordNamespaceKeyRequest($key, $namespace, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getRecordNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling getRecordNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecordNamespaceSetKey
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Record
     */
    public function getRecordNamespaceSetKey($key, $namespace, $set, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->getRecordNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation getRecordNamespaceSetKeyWithHttpInfo
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Record, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecordNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\Record';
        $request = $this->getRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Record',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecordNamespaceSetKeyAsync
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordNamespaceSetKeyAsync($key, $namespace, $set, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->getRecordNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecordNamespaceSetKeyAsyncWithHttpInfo
     *
     * Return the metadata and bins for a record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecordNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\Record';
        $request = $this->getRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $compress, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $replica, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecordNamespaceSetKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecordNamespaceSetKeyRequest($key, $namespace, $set, $authorization = null, $compress = 'false', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $replica = 'SEQUENCE', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling getRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling getRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling getRecordNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordExistsNamespaceKey
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recordExistsNamespaceKey($key, $namespace, $authorization = null, $keytype = 'STRING')
    {
        $this->recordExistsNamespaceKeyWithHttpInfo($key, $namespace, $authorization, $keytype);
    }

    /**
     * Operation recordExistsNamespaceKeyWithHttpInfo
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordExistsNamespaceKeyWithHttpInfo($key, $namespace, $authorization = null, $keytype = 'STRING')
    {
        $returnType = '';
        $request = $this->recordExistsNamespaceKeyRequest($key, $namespace, $authorization, $keytype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recordExistsNamespaceKeyAsync
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordExistsNamespaceKeyAsync($key, $namespace, $authorization = null, $keytype = 'STRING')
    {
        return $this->recordExistsNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization, $keytype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordExistsNamespaceKeyAsyncWithHttpInfo
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordExistsNamespaceKeyAsyncWithHttpInfo($key, $namespace, $authorization = null, $keytype = 'STRING')
    {
        $returnType = '';
        $request = $this->recordExistsNamespaceKeyRequest($key, $namespace, $authorization, $keytype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordExistsNamespaceKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function recordExistsNamespaceKeyRequest($key, $namespace, $authorization = null, $keytype = 'STRING')
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling recordExistsNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling recordExistsNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'HEAD',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordExistsNamespaceSetKey
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recordExistsNamespaceSetKey($key, $namespace, $set, $authorization = null, $keytype = 'STRING')
    {
        $this->recordExistsNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization, $keytype);
    }

    /**
     * Operation recordExistsNamespaceSetKeyWithHttpInfo
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordExistsNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $authorization = null, $keytype = 'STRING')
    {
        $returnType = '';
        $request = $this->recordExistsNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $keytype);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recordExistsNamespaceSetKeyAsync
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordExistsNamespaceSetKeyAsync($key, $namespace, $set, $authorization = null, $keytype = 'STRING')
    {
        return $this->recordExistsNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization, $keytype)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordExistsNamespaceSetKeyAsyncWithHttpInfo
     *
     * Check if a record exists
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordExistsNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $authorization = null, $keytype = 'STRING')
    {
        $returnType = '';
        $request = $this->recordExistsNamespaceSetKeyRequest($key, $namespace, $set, $authorization, $keytype);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordExistsNamespaceSetKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function recordExistsNamespaceSetKeyRequest($key, $namespace, $set, $authorization = null, $keytype = 'STRING')
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling recordExistsNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling recordExistsNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling recordExistsNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'HEAD',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceRecordNamespaceKey
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function replaceRecordNamespaceKey($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->replaceRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation replaceRecordNamespaceKeyWithHttpInfo
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->replaceRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceRecordNamespaceKeyAsync
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceRecordNamespaceKeyAsync($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->replaceRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceRecordNamespaceKeyAsyncWithHttpInfo
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->replaceRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceRecordNamespaceKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceRecordNamespaceKeyRequest($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling replaceRecordNamespaceKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling replaceRecordNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling replaceRecordNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceRecordNamespaceSetKey
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function replaceRecordNamespaceSetKey($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->replaceRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation replaceRecordNamespaceSetKeyWithHttpInfo
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->replaceRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceRecordNamespaceSetKeyAsync
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceRecordNamespaceSetKeyAsync($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->replaceRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceRecordNamespaceSetKeyAsyncWithHttpInfo
     *
     * Replace the bins of the specified record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->replaceRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceRecordNamespaceSetKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling replaceRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling replaceRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling replaceRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling replaceRecordNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRecordNamespaceKey
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateRecordNamespaceKey($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->updateRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation updateRecordNamespaceKeyWithHttpInfo
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRecordNamespaceKeyWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->updateRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRecordNamespaceKeyAsync
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordNamespaceKeyAsync($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->updateRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRecordNamespaceKeyAsyncWithHttpInfo
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordNamespaceKeyAsyncWithHttpInfo($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->updateRecordNamespaceKeyRequest($body, $key, $namespace, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRecordNamespaceKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateRecordNamespaceKeyRequest($body, $key, $namespace, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateRecordNamespaceKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling updateRecordNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling updateRecordNamespaceKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRecordNamespaceSetKey
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateRecordNamespaceSetKey($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $this->updateRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
    }

    /**
     * Operation updateRecordNamespaceSetKeyWithHttpInfo
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRecordNamespaceSetKeyWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->updateRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRecordNamespaceSetKeyAsync
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordNamespaceSetKeyAsync($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->updateRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRecordNamespaceSetKeyAsyncWithHttpInfo
     *
     * Merge the provided bins into the record.
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRecordNamespaceSetKeyAsyncWithHttpInfo($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '';
        $request = $this->updateRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRecordNamespaceSetKey'
     *
     * @param  object $body Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack
 example: {&quot;bin1&quot;:5, &quot;bin2&quot;:&quot;hello&quot;, &quot;bin3&quot;: [1,2,3], &quot;bin4&quot;: {&quot;one&quot;: 1}} (required)
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional, default to COMMIT_ALL)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional, default to false)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional, default to false)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional, default to NONE)
     * @param  string $keytype The Type of the userKey. (optional, default to STRING)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional, default to null)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional, default to ONE)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional, default to SESSION)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional, default to UPDATE)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional, default to SEQUENCE)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional, default to false)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional, default to false)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateRecordNamespaceSetKeyRequest($body, $key, $namespace, $set, $authorization = null, $commit_level = 'COMMIT_ALL', $compress = 'false', $durable_delete = 'false', $expiration = null, $generation = null, $generation_policy = 'NONE', $keytype = 'STRING', $max_retries = null, $predexp = 'null', $read_mode_ap = 'ONE', $read_mode_sc = 'SESSION', $record_bins = null, $record_exists_action = 'UPDATE', $replica = 'SEQUENCE', $respond_all_ops = 'false', $send_key = 'false', $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling updateRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling updateRecordNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling updateRecordNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/kvs/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = ObjectSerializer::toQueryValue($commit_level, null);
        }
        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = ObjectSerializer::toQueryValue($durable_delete, null);
        }
        // query params
        if ($expiration !== null) {
            $queryParams['expiration'] = ObjectSerializer::toQueryValue($expiration, 'int32');
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation, 'int32');
        }
        // query params
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = ObjectSerializer::toQueryValue($generation_policy, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = ObjectSerializer::toQueryValue($record_exists_action, null);
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = ObjectSerializer::toQueryValue($respond_all_ops, null);
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
