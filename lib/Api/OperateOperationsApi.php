<?php
/**
 * OperateOperationsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Aerospike REST Client
 *
 * REST Interface for Aerospike Database.
 *
 * The version of the OpenAPI document: 1.6.2
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-beta3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OperateOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OperateOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation operateNamespaceKey
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Record|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError
     */
    public function operateNamespaceKey($key, $namespace, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->operateNamespaceKeyWithHttpInfo($key, $namespace, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation operateNamespaceKeyWithHttpInfo
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Record|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError, HTTP status code, HTTP response headers (array of strings)
     */
    public function operateNamespaceKeyWithHttpInfo($key, $namespace, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $request = $this->operateNamespaceKeyRequest($key, $namespace, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Record' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Record', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Record';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Record',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation operateNamespaceKeyAsync
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateNamespaceKeyAsync($key, $namespace, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->operateNamespaceKeyAsyncWithHttpInfo($key, $namespace, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation operateNamespaceKeyAsyncWithHttpInfo
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateNamespaceKeyAsyncWithHttpInfo($key, $namespace, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\OpenAPI\Client\Model\Record';
        $request = $this->operateNamespaceKeyRequest($key, $namespace, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'operateNamespaceKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function operateNamespaceKeyRequest($key, $namespace, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling operateNamespaceKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling operateNamespaceKey'
            );
        }
        // verify the required parameter 'operations' is set
        if ($operations === null || (is_array($operations) && count($operations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operations when calling operateNamespaceKey'
            );
        }

        $resourcePath = '/v1/operate/{namespace}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($commit_level)) {
            $commit_level = ObjectSerializer::serializeCollection($commit_level, '', true);
        }
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = $commit_level;
        }
        // query params
        if (is_array($compress)) {
            $compress = ObjectSerializer::serializeCollection($compress, '', true);
        }
        if ($compress !== null) {
            $queryParams['compress'] = $compress;
        }
        // query params
        if (is_array($durable_delete)) {
            $durable_delete = ObjectSerializer::serializeCollection($durable_delete, '', true);
        }
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = $durable_delete;
        }
        // query params
        if (is_array($expiration)) {
            $expiration = ObjectSerializer::serializeCollection($expiration, '', true);
        }
        if ($expiration !== null) {
            $queryParams['expiration'] = $expiration;
        }
        // query params
        if (is_array($generation)) {
            $generation = ObjectSerializer::serializeCollection($generation, '', true);
        }
        if ($generation !== null) {
            $queryParams['generation'] = $generation;
        }
        // query params
        if (is_array($generation_policy)) {
            $generation_policy = ObjectSerializer::serializeCollection($generation_policy, '', true);
        }
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = $generation_policy;
        }
        // query params
        if (is_array($keytype)) {
            $keytype = ObjectSerializer::serializeCollection($keytype, '', true);
        }
        if ($keytype !== null) {
            $queryParams['keytype'] = $keytype;
        }
        // query params
        if (is_array($max_retries)) {
            $max_retries = ObjectSerializer::serializeCollection($max_retries, '', true);
        }
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = $max_retries;
        }
        // query params
        if (is_array($predexp)) {
            $predexp = ObjectSerializer::serializeCollection($predexp, '', true);
        }
        if ($predexp !== null) {
            $queryParams['predexp'] = $predexp;
        }
        // query params
        if (is_array($read_mode_ap)) {
            $read_mode_ap = ObjectSerializer::serializeCollection($read_mode_ap, '', true);
        }
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = $read_mode_ap;
        }
        // query params
        if (is_array($read_mode_sc)) {
            $read_mode_sc = ObjectSerializer::serializeCollection($read_mode_sc, '', true);
        }
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = $read_mode_sc;
        }
        // query params
        if ($record_bins !== null) {
            if('form' === 'form' && is_array($record_bins)) {
                foreach($record_bins as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['recordBins'] = $record_bins;
            }
        }
        // query params
        if (is_array($record_exists_action)) {
            $record_exists_action = ObjectSerializer::serializeCollection($record_exists_action, '', true);
        }
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = $record_exists_action;
        }
        // query params
        if (is_array($replica)) {
            $replica = ObjectSerializer::serializeCollection($replica, '', true);
        }
        if ($replica !== null) {
            $queryParams['replica'] = $replica;
        }
        // query params
        if (is_array($respond_all_ops)) {
            $respond_all_ops = ObjectSerializer::serializeCollection($respond_all_ops, '', true);
        }
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = $respond_all_ops;
        }
        // query params
        if (is_array($send_key)) {
            $send_key = ObjectSerializer::serializeCollection($send_key, '', true);
        }
        if ($send_key !== null) {
            $queryParams['sendKey'] = $send_key;
        }
        // query params
        if (is_array($sleep_between_retries)) {
            $sleep_between_retries = ObjectSerializer::serializeCollection($sleep_between_retries, '', true);
        }
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = $sleep_between_retries;
        }
        // query params
        if (is_array($socket_timeout)) {
            $socket_timeout = ObjectSerializer::serializeCollection($socket_timeout, '', true);
        }
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = $socket_timeout;
        }
        // query params
        if (is_array($total_timeout)) {
            $total_timeout = ObjectSerializer::serializeCollection($total_timeout, '', true);
        }
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = $total_timeout;
        }

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($operations)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($operations));
            } else {
                $httpBody = $operations;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation operateNamespaceSetKey
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Record|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError
     */
    public function operateNamespaceSetKey($key, $namespace, $set, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->operateNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation operateNamespaceSetKeyWithHttpInfo
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Record|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError|\OpenAPI\Client\Model\RestClientError, HTTP status code, HTTP response headers (array of strings)
     */
    public function operateNamespaceSetKeyWithHttpInfo($key, $namespace, $set, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $request = $this->operateNamespaceSetKeyRequest($key, $namespace, $set, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Record' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Record', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\RestClientError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RestClientError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Record';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Record',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation operateNamespaceSetKeyAsync
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateNamespaceSetKeyAsync($key, $namespace, $set, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->operateNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation operateNamespaceSetKeyAsyncWithHttpInfo
     *
     * Perform multiple operations atomically on the specified record.
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function operateNamespaceSetKeyAsyncWithHttpInfo($key, $namespace, $set, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\OpenAPI\Client\Model\Record';
        $request = $this->operateNamespaceSetKeyRequest($key, $namespace, $set, $operations, $authorization, $commit_level, $compress, $durable_delete, $expiration, $generation, $generation_policy, $keytype, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $record_exists_action, $replica, $respond_all_ops, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'operateNamespaceSetKey'
     *
     * @param  string $key Userkey for the record. (required)
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  \OpenAPI\Client\Model\Operation[] $operations An array of operation objects specifying the operations to perform on the record (required)
     * @param  string $authorization Authorization (optional)
     * @param  string $commit_level Desired consistency guarantee when committing a transaction on the server. (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $durable_delete If the transaction results in a record deletion, leave a tombstone for the record. (optional)
     * @param  int $expiration Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server. (optional)
     * @param  int $generation Expected generation. Generation is the number of times a record has been modified (including creation) on the server. (optional)
     * @param  string $generation_policy Qualify how to handle record writes based on record generation. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  string $record_exists_action How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  bool $respond_all_ops For client operate(), return a result for every operation. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function operateNamespaceSetKeyRequest($key, $namespace, $set, $operations, $authorization = null, $commit_level = null, $compress = null, $durable_delete = null, $expiration = null, $generation = null, $generation_policy = null, $keytype = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $record_exists_action = null, $replica = null, $respond_all_ops = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling operateNamespaceSetKey'
            );
        }
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling operateNamespaceSetKey'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling operateNamespaceSetKey'
            );
        }
        // verify the required parameter 'operations' is set
        if ($operations === null || (is_array($operations) && count($operations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operations when calling operateNamespaceSetKey'
            );
        }

        $resourcePath = '/v1/operate/{namespace}/{set}/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($commit_level)) {
            $commit_level = ObjectSerializer::serializeCollection($commit_level, '', true);
        }
        if ($commit_level !== null) {
            $queryParams['commitLevel'] = $commit_level;
        }
        // query params
        if (is_array($compress)) {
            $compress = ObjectSerializer::serializeCollection($compress, '', true);
        }
        if ($compress !== null) {
            $queryParams['compress'] = $compress;
        }
        // query params
        if (is_array($durable_delete)) {
            $durable_delete = ObjectSerializer::serializeCollection($durable_delete, '', true);
        }
        if ($durable_delete !== null) {
            $queryParams['durableDelete'] = $durable_delete;
        }
        // query params
        if (is_array($expiration)) {
            $expiration = ObjectSerializer::serializeCollection($expiration, '', true);
        }
        if ($expiration !== null) {
            $queryParams['expiration'] = $expiration;
        }
        // query params
        if (is_array($generation)) {
            $generation = ObjectSerializer::serializeCollection($generation, '', true);
        }
        if ($generation !== null) {
            $queryParams['generation'] = $generation;
        }
        // query params
        if (is_array($generation_policy)) {
            $generation_policy = ObjectSerializer::serializeCollection($generation_policy, '', true);
        }
        if ($generation_policy !== null) {
            $queryParams['generationPolicy'] = $generation_policy;
        }
        // query params
        if (is_array($keytype)) {
            $keytype = ObjectSerializer::serializeCollection($keytype, '', true);
        }
        if ($keytype !== null) {
            $queryParams['keytype'] = $keytype;
        }
        // query params
        if (is_array($max_retries)) {
            $max_retries = ObjectSerializer::serializeCollection($max_retries, '', true);
        }
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = $max_retries;
        }
        // query params
        if (is_array($predexp)) {
            $predexp = ObjectSerializer::serializeCollection($predexp, '', true);
        }
        if ($predexp !== null) {
            $queryParams['predexp'] = $predexp;
        }
        // query params
        if (is_array($read_mode_ap)) {
            $read_mode_ap = ObjectSerializer::serializeCollection($read_mode_ap, '', true);
        }
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = $read_mode_ap;
        }
        // query params
        if (is_array($read_mode_sc)) {
            $read_mode_sc = ObjectSerializer::serializeCollection($read_mode_sc, '', true);
        }
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = $read_mode_sc;
        }
        // query params
        if ($record_bins !== null) {
            if('form' === 'form' && is_array($record_bins)) {
                foreach($record_bins as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['recordBins'] = $record_bins;
            }
        }
        // query params
        if (is_array($record_exists_action)) {
            $record_exists_action = ObjectSerializer::serializeCollection($record_exists_action, '', true);
        }
        if ($record_exists_action !== null) {
            $queryParams['recordExistsAction'] = $record_exists_action;
        }
        // query params
        if (is_array($replica)) {
            $replica = ObjectSerializer::serializeCollection($replica, '', true);
        }
        if ($replica !== null) {
            $queryParams['replica'] = $replica;
        }
        // query params
        if (is_array($respond_all_ops)) {
            $respond_all_ops = ObjectSerializer::serializeCollection($respond_all_ops, '', true);
        }
        if ($respond_all_ops !== null) {
            $queryParams['respondAllOps'] = $respond_all_ops;
        }
        // query params
        if (is_array($send_key)) {
            $send_key = ObjectSerializer::serializeCollection($send_key, '', true);
        }
        if ($send_key !== null) {
            $queryParams['sendKey'] = $send_key;
        }
        // query params
        if (is_array($sleep_between_retries)) {
            $sleep_between_retries = ObjectSerializer::serializeCollection($sleep_between_retries, '', true);
        }
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = $sleep_between_retries;
        }
        // query params
        if (is_array($socket_timeout)) {
            $socket_timeout = ObjectSerializer::serializeCollection($socket_timeout, '', true);
        }
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = $socket_timeout;
        }
        // query params
        if (is_array($total_timeout)) {
            $total_timeout = ObjectSerializer::serializeCollection($total_timeout, '', true);
        }
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = $total_timeout;
        }

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                ['application/json', 'application/msgpack']
            );
        }

        // for model (json/xml)
        if (isset($operations)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($operations));
            } else {
                $httpBody = $operations;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
