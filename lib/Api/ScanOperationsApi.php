<?php
/**
 * ScanOperationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Aerospike REST Client
 *
 * REST Interface for Aerospike Database.
 *
 * OpenAPI spec version: 1.6.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ScanOperationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScanOperationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation performScan
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestClientScanResponse
     */
    public function performScan($namespace, $set, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->performScanWithHttpInfo($namespace, $set, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation performScanWithHttpInfo
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestClientScanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function performScanWithHttpInfo($namespace, $set, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\RestClientScanResponse';
        $request = $this->performScanRequest($namespace, $set, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientScanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation performScanAsync
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performScanAsync($namespace, $set, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->performScanAsyncWithHttpInfo($namespace, $set, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation performScanAsyncWithHttpInfo
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performScanAsyncWithHttpInfo($namespace, $set, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\RestClientScanResponse';
        $request = $this->performScanRequest($namespace, $set, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'performScan'
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $set Set for the record; equivalent to database table. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function performScanRequest($namespace, $set, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling performScan'
            );
        }
        // verify the required parameter 'set' is set
        if ($set === null || (is_array($set) && count($set) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set when calling performScan'
            );
        }

        $resourcePath = '/v1/scan/{namespace}/{set}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($concurrent_nodes !== null) {
            $queryParams['concurrentNodes'] = ObjectSerializer::toQueryValue($concurrent_nodes, null);
        }
        // query params
        if ($fail_on_cluster_change !== null) {
            $queryParams['failOnClusterChange'] = ObjectSerializer::toQueryValue($fail_on_cluster_change, null);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($include_bin_data !== null) {
            $queryParams['includeBinData'] = ObjectSerializer::toQueryValue($include_bin_data, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_concurrent_nodes !== null) {
            $queryParams['maxConcurrentNodes'] = ObjectSerializer::toQueryValue($max_concurrent_nodes, 'int32');
        }
        // query params
        if ($max_records !== null) {
            $queryParams['maxRecords'] = ObjectSerializer::toQueryValue($max_records, 'int32');
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($records_per_second !== null) {
            $queryParams['recordsPerSecond'] = ObjectSerializer::toQueryValue($records_per_second, 'int32');
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($scan_percent !== null) {
            $queryParams['scanPercent'] = ObjectSerializer::toQueryValue($scan_percent, 'int32');
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }
        // path params
        if ($set !== null) {
            $resourcePath = str_replace(
                '{' . 'set' . '}',
                ObjectSerializer::toPathValue($set),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation performScan1
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\RestClientScanResponse
     */
    public function performScan1($namespace, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        list($response) = $this->performScan1WithHttpInfo($namespace, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);
        return $response;
    }

    /**
     * Operation performScan1WithHttpInfo
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\RestClientScanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function performScan1WithHttpInfo($namespace, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\RestClientScanResponse';
        $request = $this->performScan1Request($namespace, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientScanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\RestClientError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation performScan1Async
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performScan1Async($namespace, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        return $this->performScan1AsyncWithHttpInfo($namespace, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation performScan1AsyncWithHttpInfo
     *
     * Return multiple records from the server in a scan request.
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function performScan1AsyncWithHttpInfo($namespace, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        $returnType = '\Swagger\Client\Model\RestClientScanResponse';
        $request = $this->performScan1Request($namespace, $authorization, $compress, $concurrent_nodes, $fail_on_cluster_change, $from, $include_bin_data, $keytype, $max_concurrent_nodes, $max_records, $max_retries, $predexp, $read_mode_ap, $read_mode_sc, $record_bins, $records_per_second, $replica, $scan_percent, $send_key, $sleep_between_retries, $socket_timeout, $total_timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'performScan1'
     *
     * @param  string $namespace Namespace for the record; equivalent to database name. (required)
     * @param  string $authorization Authorization (optional)
     * @param  bool $compress Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes. (optional)
     * @param  bool $concurrent_nodes Should scan requests be issued in parallel. (optional)
     * @param  bool $fail_on_cluster_change Terminate scan if cluster in migration state. Only used for server versions &lt; 4.9. (optional)
     * @param  string $from Next page token parameter. (optional)
     * @param  bool $include_bin_data Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved. (optional)
     * @param  string $keytype The Type of the userKey. (optional)
     * @param  int $max_concurrent_nodes Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned. This field is only relevant when concurrentNodes is true. (optional)
     * @param  int $max_records Number of records to return. (optional)
     * @param  int $max_retries Maximum number of retries before aborting the current transaction. The initial attempt is not counted as a retry. (optional)
     * @param  string $predexp Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored. (optional)
     * @param  string $read_mode_ap Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode. (optional)
     * @param  string $read_mode_sc Read policy for SC (strong consistency) namespaces. Determines SC read consistency options. (optional)
     * @param  string[] $record_bins Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned. (optional)
     * @param  int $records_per_second Limit returned records per second (rps) rate for each server. Do not apply rps limit if recordsPerSecond is zero. (optional)
     * @param  string $replica Replica algorithm used to determine the target node for a single record command. (optional)
     * @param  int $scan_percent Percent of data to scan. Valid integer range is 1 to 100. This field is supported on server versions &lt; 4.9. For server versions &gt;&#x3D; 4.9, use maxRecords. (optional)
     * @param  bool $send_key Send user defined key in addition to hash digest on both reads and writes. (optional)
     * @param  int $sleep_between_retries Milliseconds to sleep between retries. (optional)
     * @param  int $socket_timeout Socket idle timeout in milliseconds when processing a database command. (optional)
     * @param  int $total_timeout Total transaction timeout in milliseconds. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function performScan1Request($namespace, $authorization = null, $compress = null, $concurrent_nodes = null, $fail_on_cluster_change = null, $from = null, $include_bin_data = null, $keytype = null, $max_concurrent_nodes = null, $max_records = null, $max_retries = null, $predexp = null, $read_mode_ap = null, $read_mode_sc = null, $record_bins = null, $records_per_second = null, $replica = null, $scan_percent = null, $send_key = null, $sleep_between_retries = null, $socket_timeout = null, $total_timeout = null)
    {
        // verify the required parameter 'namespace' is set
        if ($namespace === null || (is_array($namespace) && count($namespace) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespace when calling performScan1'
            );
        }

        $resourcePath = '/v1/scan/{namespace}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($compress !== null) {
            $queryParams['compress'] = ObjectSerializer::toQueryValue($compress, null);
        }
        // query params
        if ($concurrent_nodes !== null) {
            $queryParams['concurrentNodes'] = ObjectSerializer::toQueryValue($concurrent_nodes, null);
        }
        // query params
        if ($fail_on_cluster_change !== null) {
            $queryParams['failOnClusterChange'] = ObjectSerializer::toQueryValue($fail_on_cluster_change, null);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from, null);
        }
        // query params
        if ($include_bin_data !== null) {
            $queryParams['includeBinData'] = ObjectSerializer::toQueryValue($include_bin_data, null);
        }
        // query params
        if ($keytype !== null) {
            $queryParams['keytype'] = ObjectSerializer::toQueryValue($keytype, null);
        }
        // query params
        if ($max_concurrent_nodes !== null) {
            $queryParams['maxConcurrentNodes'] = ObjectSerializer::toQueryValue($max_concurrent_nodes, 'int32');
        }
        // query params
        if ($max_records !== null) {
            $queryParams['maxRecords'] = ObjectSerializer::toQueryValue($max_records, 'int32');
        }
        // query params
        if ($max_retries !== null) {
            $queryParams['maxRetries'] = ObjectSerializer::toQueryValue($max_retries, 'int32');
        }
        // query params
        if ($predexp !== null) {
            $queryParams['predexp'] = ObjectSerializer::toQueryValue($predexp, null);
        }
        // query params
        if ($read_mode_ap !== null) {
            $queryParams['readModeAP'] = ObjectSerializer::toQueryValue($read_mode_ap, null);
        }
        // query params
        if ($read_mode_sc !== null) {
            $queryParams['readModeSC'] = ObjectSerializer::toQueryValue($read_mode_sc, null);
        }
        // query params
        if (is_array($record_bins)) {
            $record_bins = ObjectSerializer::serializeCollection($record_bins, 'multi', true);
        }
        if ($record_bins !== null) {
            $queryParams['recordBins'] = ObjectSerializer::toQueryValue($record_bins, null);
        }
        // query params
        if ($records_per_second !== null) {
            $queryParams['recordsPerSecond'] = ObjectSerializer::toQueryValue($records_per_second, 'int32');
        }
        // query params
        if ($replica !== null) {
            $queryParams['replica'] = ObjectSerializer::toQueryValue($replica, null);
        }
        // query params
        if ($scan_percent !== null) {
            $queryParams['scanPercent'] = ObjectSerializer::toQueryValue($scan_percent, 'int32');
        }
        // query params
        if ($send_key !== null) {
            $queryParams['sendKey'] = ObjectSerializer::toQueryValue($send_key, null);
        }
        // query params
        if ($sleep_between_retries !== null) {
            $queryParams['sleepBetweenRetries'] = ObjectSerializer::toQueryValue($sleep_between_retries, 'int32');
        }
        // query params
        if ($socket_timeout !== null) {
            $queryParams['socketTimeout'] = ObjectSerializer::toQueryValue($socket_timeout, 'int32');
        }
        // query params
        if ($total_timeout !== null) {
            $queryParams['totalTimeout'] = ObjectSerializer::toQueryValue($total_timeout, 'int32');
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($namespace !== null) {
            $resourcePath = str_replace(
                '{' . 'namespace' . '}',
                ObjectSerializer::toPathValue($namespace),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/msgpack']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/msgpack'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
