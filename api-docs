{"swagger":"2.0","info":{"description":"REST Interface for Aerospike Database.","version":"1.6.2","title":"Aerospike REST Client","contact":{"name":"Aerospike, Inc.","url":"https://www.aerospike.com"}},"host":"localhost:8080","basePath":"/","tags":[{"name":"Admin Operations","description":"Manage users and privileges."},{"name":"Batch Read Operations","description":"Retrieve multiple records from the server."},{"name":"Cluster information operations","description":"Retrieve basic information about the Aerospike cluster."},{"name":"Execute Operations","description":"Execute operations in background scan/query."},{"name":"Info Operations","description":"Send info commands to nodes in the Aerospike cluster."},{"name":"Key Value Operations","description":"Perform simple operations on a single record."},{"name":"Operate operations","description":"Perform multiple operations atomically on a single record."},{"name":"Scan Operations","description":"Read records in specified namespace, set."},{"name":"Secondary Index methods","description":"Manage secondary indices."},{"name":"Truncate Operations","description":"Remove multiple records from the server."}],"paths":{"/v1/admin/role":{"get":{"tags":["Admin Operations"],"summary":"Return a list of all roles registered with the Aerospike cluster.","operationId":"getRoles","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"$ref":"#/definitions/RestClientRole"}}},"403":{"description":"Not authorized to read role information","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"post":{"tags":["Admin Operations"],"summary":"Create a role on the Aerospike cluster.","operationId":"createRole","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"rcRole","description":"rcRole","required":true,"schema":{"$ref":"#/definitions/RestClientRole"}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid role creation parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to create roles.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Role already exists.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/role/{name}":{"get":{"tags":["Admin Operations"],"summary":"Get information about a specific role.","operationId":"getRole","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the role whose information should be retrieved.","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientRole"}},"403":{"description":"Not authorized to read role information","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified role not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"delete":{"tags":["Admin Operations"],"summary":"Remove a specific role from the Aerospike cluster.","operationId":"dropRole","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the role to remove.","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"403":{"description":"Not authorized to remove roles","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified role not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/role/{name}/privilege":{"post":{"tags":["Admin Operations"],"summary":"Grant a list of privileges to a specific role.","operationId":"grantPrivileges","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the role to which privileges will be granted.","required":true,"type":"string"},{"in":"body","name":"privileges","description":"privileges","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Privilege"}}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid privilege parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to modfiy roles.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified role not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/role/{name}/privilege/delete":{"patch":{"tags":["Admin Operations"],"summary":"Remove a list of privileges from a specific role.","operationId":"revokePrivileges","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the role from which privileges will be removed.","required":true,"type":"string"},{"in":"body","name":"privileges","description":"privileges","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Privilege"}}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid privilege parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to modfiy roles.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified role not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/user":{"get":{"tags":["Admin Operations"],"summary":"Return a list of information about users.","operationId":"getUsers","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"$ref":"#/definitions/User"}}},"403":{"description":"Not authorized to read user information","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"post":{"tags":["Admin Operations"],"summary":"Create a new user.","operationId":"createUser","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"userInfo","description":"userInfo","required":true,"schema":{"$ref":"#/definitions/RestClientUserModel"}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid user creation parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to create users.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"User already exists.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/user/{user}":{"get":{"tags":["Admin Operations"],"summary":"Return information about a specific user.","operationId":"getUser","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"user","in":"path","description":"user","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/User"}},"403":{"description":"Not authorized to read user information","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified user not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"delete":{"tags":["Admin Operations"],"summary":"Remove a user.","operationId":"dropUser","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"user","in":"path","description":"user","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"403":{"description":"Not authorized to delete users.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified user not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"patch":{"tags":["Admin Operations"],"summary":"Change the password of the specified user.","operationId":"changePassword","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"password","description":"password","required":true,"schema":{"type":"string"}},{"name":"user","in":"path","description":"user","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"403":{"description":"Not authorized to modify users.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified user not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/user/{user}/role":{"post":{"tags":["Admin Operations"],"summary":"Grant a set of roles to the specified user.","operationId":"grantRoles","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"roles","description":"roles","required":true,"schema":{"type":"array","items":{"type":"string"}}},{"name":"user","in":"path","description":"user","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid role parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to modify users.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified user not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/admin/user/{user}/role/delete":{"patch":{"tags":["Admin Operations"],"summary":"Revoke a set of roles from the specified user.","operationId":"revokeRoles","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"roles","description":"A list of names to revoke from the user","required":true,"schema":{"type":"array","items":{"type":"string"}}},{"name":"user","in":"path","description":"The user from which to revoke roles","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid role parameters","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to modify users.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified user not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/batch":{"post":{"tags":["Batch Read Operations"],"summary":"Return multiple records from the server in a single request.","operationId":"performBatchGet","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"allowInline","in":"query","description":"Allow batch to be processed immediately in the server's receiving thread when the server deems it to be appropriate.  If false, the batch will always be processed in separate transaction threads.  This field is only relevant for the new batch index protocol.","required":false,"type":"boolean"},{"in":"body","name":"batchKeys","description":"batchKeys","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/BatchReadRequest"}}},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxConcurrentThreads","in":"query","description":"Maximum number of concurrent synchronous batch request threads to server nodes at any point in time. If there are 16 node/namespace combinations requested and maxConcurrentThreads is 8, then batch requests will be made for 8 node/namespace combinations in parallel threads. When a request completes, a new request will be issued until all 16 requests are complete.","required":false,"type":"integer","format":"int32"},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sendSetName","in":"query","description":"Send set name field to server for every key in the batch for batch index protocol.\nThis is only necessary when authentication is enabled and security roles are defined on a per set basis.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"$ref":"#/definitions/BatchRead"}}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Non existent namespace used in one or more key.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/cluster":{"get":{"tags":["Cluster information operations"],"summary":"Return an object containing information about the Aerospike cluster.","operationId":"getClusterInfo","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/clusterInformation"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/execute/scan/status/{taskId}":{"get":{"tags":["Execute Operations"],"summary":"Get status of background scan by task id.","operationId":"executeScanStatus","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"taskId","in":"path","description":"Background scan task id.","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientExecuteTaskStatus"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/execute/scan/{namespace}":{"post":{"tags":["Execute Operations"],"summary":"Perform multiple operations in background scan/query.","operationId":"executeScanNamespace","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"in":"body","name":"operations","description":"An array of operation objects specifying the operations to perform on the record.","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Operation"}}},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientExecuteTask"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation conflict","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/execute/scan/{namespace}/{set}":{"post":{"tags":["Execute Operations"],"summary":"Perform multiple operations in background scan/query.","operationId":"executeScanNamespaceSet","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"in":"body","name":"operations","description":"An array of operation objects specifying the operations to perform on the record.","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Operation"}}},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientExecuteTask"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace or set does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation conflict","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/index":{"get":{"tags":["Secondary Index methods"],"summary":"Return information about multiple secondary indices.","operationId":"indexInformation","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"namespace","in":"query","description":"If specified, the list of returned indices will only contain entries from this namespace.","required":false,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"array","items":{"$ref":"#/definitions/RestClientIndex"}}},"403":{"description":"Not authorized to access the resource.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified namespace not found","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"post":{"tags":["Secondary Index methods"],"summary":"Create a secondary index.","operationId":"createIndex","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"indexModel","description":"indexModel","required":true,"schema":{"$ref":"#/definitions/RestClientIndex"}}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid index creation parameters.","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Index with the same name already exists, or equivalent index exists.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/index/{namespace}/{name}":{"get":{"tags":["Secondary Index methods"],"summary":"Get Information about a single secondary index.","operationId":"getIndexStats","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the index","required":true,"type":"string"},{"name":"namespace","in":"path","description":"The namespace containing the index","required":true,"type":"string"}],"responses":{"200":{"description":"OK","schema":{"type":"object","additionalProperties":{"type":"string"}}},"403":{"description":"Not authorized to access the resource.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified Index does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"delete":{"tags":["Secondary Index methods"],"summary":"Remove a secondary Index","operationId":"dropIndex","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"name","in":"path","description":"The name of the index","required":true,"type":"string"},{"name":"namespace","in":"path","description":"The namespace containing the index","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"403":{"description":"Not authorized to access the resource.","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Specified Index does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/info":{"post":{"tags":["Info Operations"],"summary":"Send a list of info commands to a random node in the cluster","operationId":"infoAny","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"infoRequests","description":"An array of info commands to send to the server. See https://www.aerospike.com/docs/reference/info/ for a list of valid commands.","required":true,"schema":{"type":"array","items":{"type":"string"}},"x-examples":{"application/json":"['build', 'edition']"}}],"responses":{"200":{"description":"Commands sent succesfully.","schema":{"type":"object","additionalProperties":{"type":"string"}}},"403":{"description":"Not authorized to perform the info command","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/info/{node}":{"post":{"tags":["Info Operations"],"summary":"Send a list of info commands to a specific node in the cluster.","operationId":"infoNode","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"infoRequests","description":"An array of info commands to send to the server. See https://www.aerospike.com/docs/reference/info/ for a list of valid commands.","required":true,"schema":{"type":"array","items":{"type":"string"}},"x-examples":{"application/json":"[build, edition]"}},{"name":"node","in":"path","description":"The node ID for the node which will receive the info commands.","required":true,"type":"string"}],"responses":{"200":{"description":"Commands sent succesfully.","schema":{"type":"object","additionalProperties":{"type":"string"}}},"403":{"description":"Not authorized to perform the info command","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"The specified Node does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/kvs/{namespace}/{key}":{"get":{"tags":["Key Value Operations"],"summary":"Return the metadata and bins for a record.","operationId":"getRecordNamespaceKey","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Record"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record not found.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"head":{"tags":["Key Value Operations"],"summary":"Check if a record exists","operationId":"recordExistsNamespaceKey","consumes":["application/json"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","allowEmptyValue":false,"enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"}],"responses":{"200":{"description":"OK"},"404":{"description":"Record does not exist."},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"post":{"tags":["Key Value Operations"],"summary":"Create a new record with the provided bins into the record.","operationId":"createRecordNamespaceKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"201":{"description":"Created"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Record Already exists","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"put":{"tags":["Key Value Operations"],"summary":"Replace the bins of the specified record.","operationId":"replaceRecordNamespaceKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"delete":{"tags":["Key Value Operations"],"summary":"Delete the specified record.","operationId":"deleteRecordNamespaceKey","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record not found.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"patch":{"tags":["Key Value Operations"],"summary":"Merge the provided bins into the record.","operationId":"updateRecordNamespaceKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/kvs/{namespace}/{set}/{key}":{"get":{"tags":["Key Value Operations"],"summary":"Return the metadata and bins for a record.","operationId":"getRecordNamespaceSetKey","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Record"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record not found.","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"head":{"tags":["Key Value Operations"],"summary":"Check if a record exists","operationId":"recordExistsNamespaceSetKey","consumes":["application/json"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","allowEmptyValue":false,"enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"}],"responses":{"200":{"description":"OK"},"404":{"description":"Record does not exist."},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"post":{"tags":["Key Value Operations"],"summary":"Create a new record with the provided bins into the record.","operationId":"createRecordNamespaceSetKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"201":{"description":"Created"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Record Already exists","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"put":{"tags":["Key Value Operations"],"summary":"Replace the bins of the specified record.","operationId":"replaceRecordNamespaceSetKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"delete":{"tags":["Key Value Operations"],"summary":"Delete the specified record.","operationId":"deleteRecordNamespaceSetKey","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record not found.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false},"patch":{"tags":["Key Value Operations"],"summary":"Merge the provided bins into the record.","operationId":"updateRecordNamespaceSetKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"in":"body","name":"bins","description":"Bins to be stored in the record. This is a mapping from a string bin name to a value. Value can be a String, integer, floating point number, list, map, bytearray, or GeoJSON value. Bytearrays and GeoJSON can only be sent using MessagePack\n example: {\"bin1\":5, \"bin2\":\"hello\", \"bin3\": [1,2,3], \"bin4\": {\"one\": 1}}","required":true,"schema":{"type":"object"}},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"204":{"description":"No Content"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Record does not exist.","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation mismatch for operation","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/operate/{namespace}/{key}":{"post":{"tags":["Operate operations"],"summary":"Perform multiple operations atomically on the specified record.","operationId":"operateNamespaceKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"in":"body","name":"operations","description":"An array of operation objects specifying the operations to perform on the record","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Operation"}}},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Record"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace or record does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation conflict","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/operate/{namespace}/{set}/{key}":{"post":{"tags":["Operate operations"],"summary":"Perform multiple operations atomically on the specified record.","operationId":"operateNamespaceSetKey","consumes":["application/json","application/msgpack"],"produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"commitLevel","in":"query","description":"Desired consistency guarantee when committing a transaction on the server.","required":false,"type":"string","enum":["COMMIT_ALL","COMMIT_MASTER"]},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"durableDelete","in":"query","description":"If the transaction results in a record deletion, leave a tombstone for the record.","required":false,"type":"boolean"},{"name":"expiration","in":"query","description":"Record expiration. Also known as ttl (time to live). Seconds record will live before being removed by the server.","required":false,"type":"integer","format":"int32"},{"name":"generation","in":"query","description":"Expected generation. Generation is the number of times a record has been modified (including creation) on the server.","required":false,"type":"integer","format":"int32"},{"name":"generationPolicy","in":"query","description":"Qualify how to handle record writes based on record generation.","required":false,"type":"string","enum":["NONE","EXPECT_GEN_EQUAL","EXPECT_GEN_GT"]},{"name":"key","in":"path","description":"Userkey for the record.","required":true,"type":"string"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"in":"body","name":"operations","description":"An array of operation objects specifying the operations to perform on the record","required":true,"schema":{"type":"array","items":{"$ref":"#/definitions/Operation"}}},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordExistsAction","in":"query","description":"How to handle the existence of the record. This is ignored for POST/PUT/UPDATE kvs methods.","required":false,"type":"string","enum":["UPDATE","UPDATE_ONLY","REPLACE","REPLACE_ONLY","CREATE_ONLY"]},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"respondAllOps","in":"query","description":"For client operate(), return a result for every operation.","required":false,"type":"boolean"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/Record"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace or record does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"409":{"description":"Generation conflict","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/scan/{namespace}":{"get":{"tags":["Scan Operations"],"summary":"Return multiple records from the server in a scan request.","operationId":"performScan_1","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"concurrentNodes","in":"query","description":"Should scan requests be issued in parallel.","required":false,"type":"boolean"},{"name":"failOnClusterChange","in":"query","description":"Terminate scan if cluster in migration state. Only used for server versions < 4.9.","required":false,"type":"boolean"},{"name":"from","in":"query","description":"Next page token parameter.","required":false,"type":"string"},{"name":"includeBinData","in":"query","description":"Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved.","required":false,"type":"boolean"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxConcurrentNodes","in":"query","description":"Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned.\nThis field is only relevant when concurrentNodes is true.","required":false,"type":"integer","format":"int32"},{"name":"maxRecords","in":"query","description":"Number of records to return.","required":false,"type":"integer","format":"int32"},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordsPerSecond","in":"query","description":"Limit returned records per second (rps) rate for each server.\nDo not apply rps limit if recordsPerSecond is zero.","required":false,"type":"integer","format":"int32"},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"scanPercent","in":"query","description":"Percent of data to scan. Valid integer range is 1 to 100.\nThis field is supported on server versions < 4.9.\nFor server versions >= 4.9, use maxRecords.","required":false,"type":"integer","format":"int32"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientScanResponse"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/scan/{namespace}/{set}":{"get":{"tags":["Scan Operations"],"summary":"Return multiple records from the server in a scan request.","operationId":"performScan","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"compress","in":"query","description":"Use zlib compression on command buffers sent to the server and responses received from the server when the buffer size is greater than 128 bytes.","required":false,"type":"boolean"},{"name":"concurrentNodes","in":"query","description":"Should scan requests be issued in parallel.","required":false,"type":"boolean"},{"name":"failOnClusterChange","in":"query","description":"Terminate scan if cluster in migration state. Only used for server versions < 4.9.","required":false,"type":"boolean"},{"name":"from","in":"query","description":"Next page token parameter.","required":false,"type":"string"},{"name":"includeBinData","in":"query","description":"Should bin data be retrieved. If false, only record digests (and user keys if stored on the server) are retrieved.","required":false,"type":"boolean"},{"name":"keytype","in":"query","description":"The Type of the userKey.","required":false,"type":"string","enum":["STRING","INTEGER","BYTES","DIGEST"]},{"name":"maxConcurrentNodes","in":"query","description":"Maximum number of concurrent requests to server nodes at any point in time. If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then scan requests will be made to 8 nodes in parallel.  When a scan completes, a new scan request will be issued until all 16 nodes have been scanned.\nThis field is only relevant when concurrentNodes is true.","required":false,"type":"integer","format":"int32"},{"name":"maxRecords","in":"query","description":"Number of records to return.","required":false,"type":"integer","format":"int32"},{"name":"maxRetries","in":"query","description":"Maximum number of retries before aborting the current transaction.\nThe initial attempt is not counted as a retry.","required":false,"type":"integer","format":"int32"},{"name":"namespace","in":"path","description":"Namespace for the record; equivalent to database name.","required":true,"type":"string"},{"name":"predexp","in":"query","description":"Optional predicate expression filter in postfix notation. If the predicate expression exists and evaluates to false, the transaction is ignored.","required":false,"type":"string"},{"name":"readModeAP","in":"query","description":"Read policy for AP (availability) namespaces. How duplicates should be consulted in a read operation. Only makes a difference during migrations and only applicable in AP mode.","required":false,"type":"string","enum":["ALL","ONE"]},{"name":"readModeSC","in":"query","description":"Read policy for SC (strong consistency) namespaces. Determines SC read consistency options.","required":false,"type":"string","enum":["ALLOW_REPLICA","ALLOW_UNAVAILABLE","LINEARIZE","SESSION"]},{"name":"recordBins","in":"query","description":"Optionally specify a set of bins to return when fetching a record. If omitted, all bins will be returned.","required":false,"type":"array","items":{"type":"string"},"collectionFormat":"multi"},{"name":"recordsPerSecond","in":"query","description":"Limit returned records per second (rps) rate for each server.\nDo not apply rps limit if recordsPerSecond is zero.","required":false,"type":"integer","format":"int32"},{"name":"replica","in":"query","description":"Replica algorithm used to determine the target node for a single record command.","required":false,"type":"string","enum":["MASTER","MASTER_PROLES","SEQUENCE","RANDOM"]},{"name":"scanPercent","in":"query","description":"Percent of data to scan. Valid integer range is 1 to 100.\nThis field is supported on server versions < 4.9.\nFor server versions >= 4.9, use maxRecords.","required":false,"type":"integer","format":"int32"},{"name":"sendKey","in":"query","description":"Send user defined key in addition to hash digest on both reads and writes.","required":false,"type":"boolean"},{"name":"set","in":"path","description":"Set for the record; equivalent to database table.","required":true,"type":"string"},{"name":"sleepBetweenRetries","in":"query","description":"Milliseconds to sleep between retries.","required":false,"type":"integer","format":"int32"},{"name":"socketTimeout","in":"query","description":"Socket idle timeout in milliseconds when processing a database command.","required":false,"type":"integer","format":"int32"},{"name":"totalTimeout","in":"query","description":"Total transaction timeout in milliseconds.","required":false,"type":"integer","format":"int32"}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/RestClientScanResponse"}},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"404":{"description":"Namespace or set does not exist","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/truncate/{namespace}":{"delete":{"tags":["Truncate Operations"],"summary":"Truncate records in a specified namespace.","operationId":"truncateNamespace","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"date","in":"query","description":"All records last updated before this date/time will be truncated. If not specified, all records will be truncated.\n This is a string representation of a date time utilizing the ISO-8601 extended offset date-time format. example: 2019-12-03T10:15:30+01:00","required":false,"type":"string","allowEmptyValue":false,"x-example":"2019-12-03T10:15:30+01:00"},{"name":"namespace","in":"path","description":"The namespace whose records will be truncated.","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}},"/v1/truncate/{namespace}/{set}":{"delete":{"tags":["Truncate Operations"],"summary":"Truncate records in a specified namespace and set.","operationId":"truncateSet","produces":["application/json","application/msgpack"],"parameters":[{"name":"Authorization","in":"header","description":"Authorization","required":false,"type":"string"},{"name":"date","in":"query","description":"All records last updated before this date/time will be truncated. If not specified, all records will be truncated.\n This is a string representation of a date time utilizing the ISO-8601 extended offset date-time format. example: 2019-12-03T10:15:30+01:00","required":false,"type":"string","allowEmptyValue":false,"x-example":"2019-12-03T10:15:30+01:00"},{"name":"namespace","in":"path","description":"The namespace whose records will be truncated","required":true,"type":"string"},{"name":"set","in":"path","description":"The set, in the specified namespace, whose records will be truncated","required":true,"type":"string"}],"responses":{"202":{"description":"Accepted"},"400":{"description":"Invalid parameters or request","schema":{"$ref":"#/definitions/RestClientError"}},"403":{"description":"Not authorized to access the resource","schema":{"$ref":"#/definitions/RestClientError"}},"500":{"description":"The REST Client encountered an error processing the request","schema":{"$ref":"#/definitions/RestClientError"}}},"deprecated":false}}},"definitions":{"BatchRead":{"type":"object","properties":{"binNames":{"type":"array","description":"List of bins to limit the record response to.","items":{"type":"string"}},"key":{"description":"Key to retrieve a record","$ref":"#/definitions/Key"},"readAllBins":{"type":"boolean","description":"Whether all bins should be returned with this record"},"record":{"description":"Record associated with the key. Null if the record was not found","$ref":"#/definitions/Record"}},"title":"BatchRead"},"BatchReadRequest":{"type":"object","required":["key"],"properties":{"binNames":{"type":"array","description":"List of bins to limit the record response to.","items":{"type":"string"}},"key":{"description":"Key to retrieve a record","$ref":"#/definitions/Key"},"readAllBins":{"type":"boolean","description":"Whether all bins should be returned with this record"}},"title":"BatchReadRequest"},"Key":{"type":"object","required":["namespace"],"properties":{"digest":{"type":"string","example":"AAAAAAAAAAAAAAAAAAAAAAAAAAA=","description":"URL safe base64 encoded key digest. Returned by the server on batch responses. May be provided by client."},"keytype":{"type":"string","example":"STRING","description":"Enum describing the type of the userKey. This field is omitted in MessagePack responses.","enum":["STRING","INTEGER","BYTES","DIGEST"]},"namespace":{"type":"string","example":"testNS"},"setName":{"type":"string","example":"testSet"},"userKey":{"type":"object","example":"userKey","description":"The user key, it may be a string, integer, or URL safe Base64 encoded bytes."}},"title":"Key"},"NamespaceInformation":{"type":"object","properties":{"name":{"type":"string","example":"testNS"},"sets":{"type":"array","items":{"$ref":"#/definitions/RestClientSetInformation"}}},"title":"NamespaceInformation"},"NodeInformation":{"type":"object","properties":{"name":{"type":"string","example":"BB9DE9B1B270008"}},"title":"NodeInformation"},"Operation":{"type":"object","required":["opValues","operation"],"properties":{"opValues":{"type":"object","example":{"bin":"listbin","values":[1,2,3]}},"operation":{"type":"string","example":"LIST_APPEND_ITEMS","description":"Aerospike operation to perform on the record","enum":["ADD","APPEND","GET","PREPEND","READ","GET_HEADER","TOUCH","PUT","DELETE","LIST_APPEND","LIST_APPEND_ITEMS","LIST_CLEAR","LIST_GET","LIST_GET_BY_INDEX","LIST_GET_BY_INDEX_RANGE","LIST_GET_BY_RANK","LIST_GET_BY_RANK_RANGE","LIST_GET_BY_VALUE_REL_RANK_RANGE","LIST_GET_BY_VALUE","LIST_GET_BY_VALUE_RANGE","LIST_GET_BY_VALUE_LIST","LIST_GET_RANGE","LIST_INCREMENT","LIST_INSERT","LIST_INSERT_ITEMS","LIST_POP","LIST_POP_RANGE","LIST_REMOVE","LIST_REMOVE_BY_INDEX","LIST_REMOVE_BY_INDEX_RANGE","LIST_REMOVE_BY_RANK","LIST_REMOVE_BY_RANK_RANGE","LIST_REMOVE_BY_VALUE_REL_RANK_RANGE","LIST_REMOVE_BY_VALUE","LIST_REMOVE_BY_VALUE_RANGE","LIST_REMOVE_BY_VALUE_LIST","LIST_REMOVE_RANGE","LIST_SET","LIST_SET_ORDER","LIST_SIZE","LIST_SORT","LIST_TRIM","LIST_CREATE","MAP_CLEAR","MAP_DECREMENT","MAP_GET_BY_INDEX","MAP_GET_BY_INDEX_RANGE","MAP_GET_BY_KEY","MAP_GET_BY_KEY_LIST","MAP_GET_BY_KEY_RANGE","MAP_GET_BY_RANK","MAP_GET_BY_RANK_RANGE","MAP_GET_BY_VALUE","MAP_GET_BY_VALUE_RANGE","MAP_GET_BY_VALUE_LIST","MAP_GET_BY_KEY_REL_INDEX_RANGE","MAP_GET_BY_VALUE_REL_RANK_RANGE","MAP_INCREMENT","MAP_PUT","MAP_PUT_ITEMS","MAP_REMOVE_BY_INDEX","MAP_REMOVE_BY_INDEX_RANGE","MAP_REMOVE_BY_KEY","MAP_REMOVE_BY_KEY_RANGE","MAP_REMOVE_BY_RANK","MAP_REMOVE_BY_RANK_RANGE","MAP_REMOVE_BY_KEY_REL_INDEX_RANGE","MAP_REMOVE_BY_VALUE_REL_RANK_RANGE","MAP_REMOVE_BY_VALUE","MAP_REMOVE_BY_VALUE_RANGE","MAP_REMOVE_BY_VALUE_LIST","MAP_SET_MAP_POLICY","MAP_SIZE","MAP_CREATE","BIT_RESIZE","BIT_INSERT","BIT_REMOVE","BIT_SET","BIT_OR","BIT_XOR","BIT_AND","BIT_NOT","BIT_LSHIFT","BIT_RSHIFT","BIT_ADD","BIT_SUBTRACT","BIT_SET_INT","BIT_GET","BIT_COUNT","BIT_LSCAN","BIT_RSCAN","BIT_GET_INT","HLL_INIT","HLL_ADD","HLL_SET_UNION","HLL_SET_COUNT","HLL_FOLD","HLL_COUNT","HLL_UNION","HLL_UNION_COUNT","HLL_INTERSECT_COUNT","HLL_SIMILARITY","HLL_DESCRIBE"]}},"title":"Operation"},"Pagination":{"type":"object","properties":{"nextToken":{"type":"string","description":"The next page token."},"totalRecords":{"type":"integer","format":"int64","description":"The total number of records in page."}},"title":"Pagination"},"Privilege":{"type":"object","required":["code"],"properties":{"code":{"type":"string","enum":["user-admin","sys-admin","data-admin","read","read-write","read-write-udf","write"]},"namespace":{"type":"string","example":"testNS","description":"Namespace Scope"},"set":{"type":"string","example":"testSet","description":"setName Scope"}},"title":"Privilege"},"Record":{"type":"object","properties":{"bins":{"type":"object","example":{"bin1": "val1", "pi": "3.14"},"description":"A mapping from binName to binValue"},"generation":{"type":"integer","format":"int32","example":2,"description":"The generation of the record."},"ttl":{"type":"integer","format":"int32","example":1000,"description":"The time to live for the record, in seconds from now."}},"title":"Record"},"RestClientError":{"type":"object","properties":{"inDoubt":{"type":"boolean","example":false,"description":"A boolean specifying whether it was possible that the operation succeeded. This is only included if true."},"internalErrorCode":{"type":"integer","format":"int32","example":-3,"description":"An internal error code for diagnostic purposes. This may be null"},"message":{"type":"string","example":"Error Message","description":"A message describing the cause of the error."}},"title":"RestClientError","description":"Error object returned from unsuccesful operations."},"RestClientExecuteTask":{"type":"object","properties":{"scan":{"type":"boolean","description":"The scan indicator."},"taskId":{"type":"integer","format":"int64","description":"The task ID value."}},"title":"RestClientExecuteTask"},"RestClientExecuteTaskStatus":{"type":"object","properties":{"status":{"type":"string","description":"The ExecuteTask status."},"task":{"description":"The ExecuteTask object.","$ref":"#/definitions/RestClientExecuteTask"}},"title":"RestClientExecuteTaskStatus"},"RestClientIndex":{"type":"object","properties":{"bin":{"type":"string","example":"ageBin","description":"The bin which is indexed"},"collection_type":{"type":"string","enum":["DEFAULT","LIST","MAPKEYS","MAPVALUES"]},"name":{"type":"string","example":"ageIndex","description":"The name of the index. This must be unique per set"},"namespace":{"type":"string","example":"testNS"},"set":{"type":"string","example":"testSet"},"type":{"type":"string","enum":["NUMERIC","STRING","GEO2DSPHERE"]}},"title":"RestClientIndex"},"RestClientRole":{"type":"object","properties":{"name":{"type":"string","example":"customRole"},"privileges":{"type":"array","items":{"$ref":"#/definitions/Privilege"}}},"title":"RestClientRole"},"RestClientScanResponse":{"type":"object","properties":{"pagination":{"description":"Pagination details.","$ref":"#/definitions/Pagination"},"records":{"type":"array","description":"List of records for current page.","items":{"$ref":"#/definitions/Record"}}},"title":"RestClientScanResponse"},"RestClientSetInformation":{"type":"object","properties":{"name":{"type":"string","example":"demo"},"objectCount":{"type":"integer","format":"int32","example":100}},"title":"RestClientSetInformation"},"RestClientUserModel":{"type":"object","properties":{"password":{"type":"string"},"roles":{"type":"array","items":{"type":"string"}},"username":{"type":"string"}},"title":"RestClientUserModel"},"User":{"type":"object","properties":{"name":{"type":"string"},"roles":{"type":"array","items":{"type":"string"}}},"title":"User"},"clusterInformation":{"type":"object","properties":{"namespaces":{"type":"array","items":{"$ref":"#/definitions/NamespaceInformation"}},"nodes":{"type":"array","items":{"$ref":"#/definitions/NodeInformation"}}},"title":"clusterInformation"}}}